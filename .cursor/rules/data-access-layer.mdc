---
description: Guidelines for Data Access Layer
globs: src/data/**/*.ts
alwaysApply: false
---
# Guidelines for Data Access Layer

## Purpose and Overview
Data access is responsible for interacting with external APIs, databases, or other data sources. It isolates the data fetching and mutation logic from business logic and UI components, making the code more maintainable and testable.

## Structure and Organization

### Data Access Module Structure
```
src/
└── data/                  # Shared data access layer module
    └── [entity]/               # Shared Database, External API and any other data sources 
            ├── get-[entity].ts
            ├── get-[entity]s.ts
            ├── create-[entity].ts
            ├── update-[entity].ts
            └── delete-[entity].ts
└── features/
    └── [feature-name]/
        └── _data/         # Feature-specific data access
            ├── get-[entity].ts
            ├── get-[entity]s.ts
            ├── create-[entity].ts
            ├── update-[entity].ts
            └── delete-[entity].ts
```

## Naming Conventions

### Functions
- `get[Entity]Data`: For retrieving a single entity
- `get[Entity]sData`: For retrieving multiple entities
- `create[Entity]Data`: For creating an entity
- `update[Entity]Data`: For updating an entity
- `delete[Entity]Data`: For deleting an entity

### Types
- `[Entity]`: Main entity type
- `Get[Entity]DataArgs`: Arguments for get functions
- `Create[Entity]DataArgs`: Arguments for create functions
- `Update[Entity]DataArgs`: Arguments for update functions
- `Delete[Entity]DataArgs`: Arguments for delete functions

## Implementation Guidelines

### Data Access Layer
- Use the native `fetch` API or a library like Axios for HTTP requests
- Always type your request and response data
- Handle error responses appropriately
- Keep authentication logic centralized
- Return typed responses for better integration with React Query

### Example Data Access Function
```typescript
import { type Entity } from './schema';

export type GetEntityDataArgs = {
  id: number;
};

export async function getEntityData({ id }: GetEntityDataArgs): Promise<Entity> {
  const response = await fetch(`https://api.example.com/entities/${id}`);
  
  if (!response.ok) {
    throw new Error(`API error: ${response.status}`);
  }
  
  return await response.json();
}
```